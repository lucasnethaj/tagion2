name: Commit Build and Test
on:
  workflow_dispatch:
  push: 
    branches: 
      - current
env:
  TARGET: x86_64-linux
  STAGE: commit
  DC: dmd
  RETENTION_DAYS_BINS: 3

jobs:
  commit_stage:
    runs-on: CI-1
    outputs:
      tarball: ${{steps.create_tar.outputs.tar_filename}}
      stage: "commit"    
    steps:
      - name: get repository
        run: |
          cd ..
          git clone git@github.com:tagion/tagion.git || echo "repo already exists"
      - name: pull
        run: |
          git checkout current
          git pull

      - name: Run tests
        run: |
          make clean ci -j DC=${{env.DC}} || make proper ci -j DC=${{env.DC}}
          
      - name: Report unittests
        run: |
          RESULT=$(cat logs/${{ env.TARGET }}/unittest.log | grep -E "^[0-9]+ modules passed unittests")
          echo -e "### :heavy_check_mark: Unittests passed \n $RESULT" >> $GITHUB_STEP_SUMMARY

      - name: Report bddtests
        run: | 
          RESULT=$(./build/${{ env.TARGET }}/bin/collider -c logs/${{ env.TARGET }}/bdd/${{ env.STAGE }}/results)
          echo $RESULT | grep "Test result success!"
          ./build/${{env.TARGET}}/bin/shittier -o /dev/stdout logs/ >> $GITHUB_STEP_SUMMARY
               

      - name: Add schedule to build
        run: |
          cp schedule.json build/${{ env.TARGET }}/bin

      - name: Create tar ball
        if: success() || failure()
        id: create_tar
        run: |
          commit_hash=$(git rev-parse --short HEAD)
          timestamp=$(date +%M-%H-%d-%m-%y)
          tar_filename="${commit_hash}-${timestamp}.tar.gz"
          mv build/trunk/trunk.tgz $tar_filename
          echo -e "\nRelease candidate is: $tar_filename" >> $GITHUB_STEP_SUMMARY
          echo "tar_filename=$tar_filename" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: failed-run
          path: ./${{steps.create_tar.outputs.tar_filename}}
      
      - name: Upload to shared directory
        if: success()
        run: |
          folder=/mnt/nfs/${{env.STAGE}}
          mkdir -p $folder
          cp ${{steps.create_tar.outputs.tar_filename}} $folder
          
      - name: Start next workflow
        if: success()
        run: gh workflow run acceptance.yml -f tarball=${{ steps.create_tar.outputs.tar_filename }} -f stage=${{ env.STAGE }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
 
      - name: Cleanup
        if: success() || failure()
        run: rm ${{ steps.create_tar.outputs.tar_filename }}

  acceptance_stage:
    runs-on: CD
    needs: commit_stage
    steps:
      - name: Copy Artifact to local machine
        run: |
          find . -mindepth 1 -delete
          cp /mnt/nfs/${{needs.commit_stage.outputs.stage}}/${{needs.commit_stage.outputs.tarball}} .
          tar -xzf ${{needs.commit_stage.outputs.tarball}}
        
      - name: Run collider tests
        run: |
          source $PWD/build/${{ env.TARGET }}/bin/bddenv.sh
          export DBIN=$PWD/build/${{ env.TARGET }}/bin
          export DLOG=$PWD/logs/${{ env.TARGET }}
          export COLLIDER_ROOT=$PWD/logs/${{ env.TARGET }}/bdd
          export PATH=$DBIN:$PATH
          ./build/${{ env.TARGET }}/bin/collider -r acceptance -j2 -b build/${{ env.TARGET }}/bin/testbench -s build/${{ env.TARGET }}/bin/schedule.json  

      - name: Generate reports
        if: failure() || success()
        run: |
          ./build/${{ env.TARGET }}/bin/shittier -o $GITHUB_STEP_SUMMARY logs/

      - name: Create tar ball
        run: tar -czf ${{needs.commit_stage.outputs.tarball}} --exclude='*.o' logs/ build/ 
        
      - uses: actions/upload-artifact@v3
        if: failure() 
        with:
          name: failed-run
          path: ./${{needs.commit_stage.outputs.tarball}}

      - name: Upload to shared directory
        if: success()
        run: |
          folder=/mnt/nfs/acceptance
          mkdir -p $folder
          cp ${{needs.commit_stage.outputs.tarball}} $folder

      - name: Cleanup
        if: success() || failure()
        run: |
          rm ${{ needs.commit_stage.outputs.tarball }}
          rm -rf *
