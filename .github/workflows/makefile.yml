name: Makefile CI
on:
  pull_request:
    branches: [ "develop" ]
  push: 
    branches: [ "develop" ]
env:
  ## Sets environment variable
  TARGET_BUILD: x86_64-linux
  PARALEL: 1
  RETENTION_DAYS_BINS: 3
  TAGION_CACHE_DIR: ~/tagion_cache 
jobs:
  build_and_unittest:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use cache of libs
        run: |
          if [ -d $TAGION_CACHE_DIR/$TARGET_BUILD ]; then
            echo "Coping cache"
            mkdir -p ./build/$TARGET_BUILD 
            cp -fr $TAGION_CACHE_DIR/$TARGET_BUILD/ ./build/$TARGET_BUILD/
          else 
            echo "Cache not found"
          fi

      - name: Run unittests
        run: |
          source ~/.bashrc
          make unittest -j ${{ env.PARALEL }}
      - name: Build
        run: |
          source ~/.bashrc
          make bins -j ${{ env.PARALEL }}
          
      - name: Upload bins
        uses: actions/upload-artifact@v3
        with:
          name: core-bins
          path: build/${{ env.TARGET_BUILD }}/bin/tagion
          retention-days: ${{ env.RETENTION_DAYS_BINS }}

      - name: Make cache of libs
        run: |
          mkdir -p $TAGION_CACHE_DIR/$TARGET_BUILD && /bin/cp -rf ./build/$TARGET_BUILD/tmp $TAGION_CACHE_DIR/$TARGET_BUILD/ && /bin/cp -rf ./build/$TARGET_BUILD/lib $TAGION_CACHE_DIR/$TARGET_BUILD/

      - name: Upload unittest result
        uses: actions/upload-artifact@v3
        with:
          name: core-unittests-logs
          path: logs/${{ env.TARGET_BUILD }}/unittest.log

      - name: Check unittests
        run: tail -n 5 logs/${{ env.TARGET_BUILD }}/unittest.log | head -n 1 | grep passed

  create_tagion_images:
    runs-on: self-hosted
    needs: build_and_unittest
    outputs:
      scenario_list: ${{ steps.scenario_list.outputs }}
    steps:
      - name: Cleanup
        run: rm -rf * ; ls; pwd;

      - name: Download Docker context
        uses: actions/checkout@v3
        with:
          repository: tagion/tagion-docker
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT

      - name: Download bins
        uses: actions/download-artifact@v3
        with:
          name: core-bins
          path: bins
 
      - name: Download QA tools
        uses: actions/checkout@v3
        with:
          repository: tagion/qa-framework
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: qa-tools

      - name: Debug info
        run: ls; echo ===========; ls bins; echo ===========; ls qa-tools; pwd;

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build tagion img
        run: docker build -t tagion/toolkit:$GITHUB_SHA . --target tagion
      - name: Build tagion-qa img
        run: docker build -t tagion/qa-toolkit:$GITHUB_SHA . --target tagion-qa

      - name: Push tagion img
        run: docker image push tagion/toolkit:$GITHUB_SHA
      - name: Push tagion-qa img
        run: docker image push tagion/qa-toolkit:$GITHUB_SHA

      - name: List scenarious
        id: scenario_list
        run: |
          SCENARIOUS=""
          for f in ./qa-tools/src/scenarious/*.ts; do
              f=${f##*/}
              SCENARIOUS+="${f%.ts} "
          done
          echo $SCENARIOUS >> $GITHUB_OUTPUT

    
      
  run_qa_scripts:
    runs-on: self-hosted
    needs: create_tagion_images
    steps: 
      - name: Debug info - input
        run: echo ${{needs.create_tagion_images.outputs.scenario_list}} 
        
  
