/* Code generated by cmd/cgo; DO NOT EDIT. */

module p2p.cgo.libp2pgowrapper;

import core.stdc.config;
import p2p.cgo.c_helper;

extern (C):
nothrow:
@nogc:

/* package p2p */

/* for ptrdiff_t below */

struct _GoString_
{
    const(char)* p;
    ptrdiff_t n;
}

/* Start of preamble from import "C" comments.  */

/* End of preamble from import "C" comments.  */

/* Start of boilerplate cgo prologue.  */

alias GoInt8 = byte;
alias GoUint8 = ubyte;
alias GoInt16 = short;
alias GoUint16 = ushort;
alias GoInt32 = int;
alias GoUint32 = uint;
alias GoInt64 = long;
alias GoUint64 = ulong;
alias GoInt = long;
alias GoUint = ulong;
alias GoUintptr = c_ulong;
alias GoFloat32 = float;
alias GoFloat64 = double;
alias GoComplex64 = cfloat;
alias GoComplex128 = cdouble;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
alias _check_for_64_bit_pointer_matching_GoInt = char[1];

alias GoString = _GoString_;

alias GoMap = void*;
alias GoChan = void*;

struct GoInterface
{
    void* t;
    void* v;
}

struct GoSlice
{
    void* data;
    GoInt len;
    GoInt cap;
}

/* End of boilerplate cgo prologue.  */

void enableLogger ();

/* Return type for optAddressApi */
struct optAddressApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optAddressApi_return optAddressApi (DBuffer p0);

/* Return type for optNoListenAddrsApi */
struct optNoListenAddrsApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optNoListenAddrsApi_return optNoListenAddrsApi ();

/* Return type for optEnableAutoNATServiceApi */
struct optEnableAutoNATServiceApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableAutoNATServiceApi_return optEnableAutoNATServiceApi ();

/* Return type for optEnableAutoRelayApi */
struct optEnableAutoRelayApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableAutoRelayApi_return optEnableAutoRelayApi ();

/* Return type for optEnableNATPortMapApi */
struct optEnableNATPortMapApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableNATPortMapApi_return optEnableNATPortMapApi ();

/* Return type for optIdentityApi */
struct optIdentityApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optIdentityApi_return optIdentityApi (int p0);

/* Return type for subscribeToRechabiltyEventApi */
struct subscribeToRechabiltyEventApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

subscribeToRechabiltyEventApi_return subscribeToRechabiltyEventApi (void* p0, void* p1, DBuffer p2);

/* Return type for subscribeToAddressUpdatedEventApi */
struct subscribeToAddressUpdatedEventApi_return
{
    void* r0; /* prt */
    ErrorCode r1; /* code */
}

subscribeToAddressUpdatedEventApi_return subscribeToAddressUpdatedEventApi (void* p0, void* p1, DBuffer p2);

ErrorCode unsubscribeApi (void* p0);

/* Return type for createBackgroundContextApi */
struct createBackgroundContextApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createBackgroundContextApi_return createBackgroundContextApi ();

/* Return type for createMdnsApi */
struct createMdnsApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createMdnsApi_return createMdnsApi (void* p0, void* p1, GoInt32 p2, DBuffer p3);

/* Return type for registerNotifeeApi */
struct registerNotifeeApi_return
{
    void* r0; /* notifeePtr */
    ErrorCode r1; /* code */
}

registerNotifeeApi_return registerNotifeeApi (void* p0, void* p1, DBuffer p2);

ErrorCode unregisterNotifeeApi (void* p0, void* p1);

ErrorCode stopMdnsApi (void* p0);

/* Return type for createNodeApi */
struct createNodeApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createNodeApi_return createNodeApi (void* p0, GoSlice p1);

ErrorCode closeNodeApi (void* p0);

ErrorCode getNodeIdApi (void* p0, void* p1, void* p2);

ErrorCode getNodeAddrInfoMarshalApi (void* p0, void* p1, void* p2);

ErrorCode getNodeAddressesApi (void* p0, void* p1, void* p2);

ErrorCode getNodePublicAddressApi (void* p0, void* p1, void* p2);

ErrorCode getAddrInfoMarshalApi (void* p0, void* p1, void* p2);

/* Return type for handleApi */
struct handleApi_return
{
    void* r0; /* ptr */
    GoUint64 r1; /* id */
    ErrorCode r2; /* code */
}

handleApi_return handleApi (void* p0, DBuffer p1, GoSlice p2, GoUint8 p3);

ErrorCode connectApi (void* p0, void* p1, DBuffer p2, GoUint8 p3);

ErrorCode listenStreamApi (void* p0, GoUint64 p1, void* p2, DBuffer p3, GoInt32 p4, GoInt32 p5);

ErrorCode listenApi (void* p0, DBuffer p1, void* p2, DBuffer p3, GoInt32 p4, GoInt32 p5);

ErrorCode listenMatchApi (void* p0, DBuffer p1, void* p2, DBuffer p3, GoInt32 p4, GoInt32 p5, GoSlice p6);

ErrorCode closeListenerApi (void* p0, DBuffer p1);

ErrorCode writeApi (void* p0, void* p1, int p2);

ErrorCode closeStreamApi (void* p0);

ErrorCode resetStreamApi (void* p0);

ErrorCode destroyApi (void* p0);

/* Return type for createAutoNATApi */
struct createAutoNATApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createAutoNATApi_return createAutoNATApi (void* p0, void* p1, GoSlice p2);

/* Return type for optEnableServiceApi */
struct optEnableServiceApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableServiceApi_return optEnableServiceApi (void* p0);

/* Return type for optWithoutStartupDelayApi */
struct optWithoutStartupDelayApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optWithoutStartupDelayApi_return optWithoutStartupDelayApi ();

/* Return type for optWithScheduleApi */
struct optWithScheduleApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optWithScheduleApi_return optWithScheduleApi (GoInt32 p0, GoInt32 p1);

ErrorCode getPublicAddress (void* p0, void* p1, void* p2);

/* Return type for getNATStatus */
struct getNATStatus_return
{
    NATStatus r0; /* status */
    ErrorCode r1; /* code */
}

getNATStatus_return getNATStatus (void* p0);

void callGCApi ();

